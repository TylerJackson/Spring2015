CSE 8349 Advanced Network and System Security Lecture Notes

--------------------------------------------------------

Advanced Network and System Security Lecture 1 Notes

Call up to 9PM
(972)-517-6928

send email
mcfearin@smu.edu

know what's covered in lecture

submit the current events

Risk Management
-Goal: to protect the enterprise and its ability to carry out its mission
	-goal is not IT focused, its mission focused
	-management function
-balance cost of protection with gains in mission capability

Basic Steps of Risk Management
-Risk assessment
-Risk Handling
-Evaluation and Assessment

Risk Assessment ->memorize list
-system/asset characterization
	-iterative process
	-finding out what you have that's of value
	-e.g. Dairy Queen Specific Location
			-employees (training included, training materials), customers, machines, building, land, cash, supplies, data (financial records), intellectual property (recipes, brands, trademarks), marketing materials, processes, franchise network, IT systems, reputation)
	-how to do this
		-brainstorming
		-looking at expenses
		-look at reports
		-network scans
		-interviews 
		-questionaires
		-customer feedback
	-Categorize your assets
		-facilities
		-inventory
		-capital equipment
		-people
		-reputation
		-Intellectual property
		-IT
	-Asset Attributes
		-people->experience, time, ID, skills (soft and hard), clearance, certifications, education, supervisor, salary & benefits
		-procedures->inputs & outputs, influence (What it applies to), efficiency, expected results, owner
		-Data->source, value, quantity, format, permissions, confidentiality, quality, location, backup procedures
		-Hardware/Software->name, IP address, MAC address, Type, Version, location, owner, manufacturer, model #, serial #
	-Asset Valuation
		-critical to success ($-$$$$$)
		-generates revenue/profit ($-$$$$$)
		-expense to replace ($-$$$$$)
		-most embarrassing if revealed (greatest liability, $-$$$$$)


	-the thoroughness of this section is what's important
-threat identification
	-who or what might want to cause harm to what you have of value (actor)
	-fire, climate control outtage, power failure, angry customers, employee (short time, disgruntled), lawyers (law suit), media (reputation), social network(including people), robber, competition, government regulators, natural disasters (earthquakes, floods, lightning, tornado, hurricanes), bacteria/virus/disease, Environmental threats(power failure, chemical leaks, global warming, cost of resources (market fluctuations)),human threats(insider, spy, terrorist, hacker, criminal, thief)
	-need to identify threat source (list above), the motivation, and the threat actions (Nest publication, table 3.1) 
-vulnerability identification
	-weakness
	-look at to determine vulnerabilities
		-outdated software, processes, vendor advisories, penetration testing, involve many people from entire organization, 
	-how can a threat exploit an asset
	-vulnerability, threat-source, threat action (table 3.2)
-control analysis
	-what is currently in place to help
	-technical (firewalls), non-technical physical security (locks on doors, cameras, etc.), environmental security (uninterruptable power supply), procedures
-likelihood determination
	-risk = likelihood*impact measured in $
	-High Medium Low, 5 - 1
	-threat source motivation
	-threat source capability
	-nature of vulnerability
	-existence of controls
-impact analysis
	-go back to asset identification
	-how many $s did we assign to value of asset, and if it would hurt one of these more valuable assets then the impact is greater
-risk determination
	-needs to be consistent (could do table 3.6)
	-use a risk matrix with likelihood and impact on axes
-control reccomendations
	-effectiveness
	-regulations
	-policies of organization
	-operational impact
	-safety - reliability
	-avoidance
	-need cost/benefit analysis
		annual loss expectancy before-annual loss expectancy after -cost of control
		-if this is positive then it is a beneficial control
-documentation
	-giving them the asset identification, risk analysis, etc. documents you have created so that they at the very least get these documents out of your services, and then will want to work with you again

 Ways of Handling Risk
-4 risk control strategies
	1. Avoidance: make it less likely
	2. Mitigation: reduce impact
	3. Transfer: Insurance
	4. Accept: I am aware of risks and I accept the 
			   responsibilities
	Deny-Ignore risk- obviously bad


-------------------------------------------------------

Adv Network and System Security Lecture 2 Notes

Project 1

Intro	
		-audience
		-scope
Asset characterization
		- list, characteristics, valuation
		-impact to profit, image, revenue


Project 2 is either an audit of SMU engineering network or build a covert channel

Security Audit

Risk Assessment vs. Security Audit
-RA -financial perspective 
	-measurements in terms of $$
-SA - technical

External 
	-perimeter testing
	-launched from outside
	-emulates hackers
	-concerns firewalls
Internal
	-inside the perimeter
	-emulates insiders (employees, consultants, or others if perimeter fails)

Why do SA
-better knowledge of client's network
-more convincing to clients who have false confidence
-proof of objective evaluation 
-internet
	-easily separable
	-big target
	-out of control

Steps
	1.) intelligence gathering
			web site - goals of company website
				 - web audience
				 - web mapping
			IP address
			Domain names
			email addresses
	2.) foot printing
			map all IP addresses
				-DNS lookups or reverse lookups
			block IP addresses
				-subnets
	3.) Vitality (refining the footprint)
			tools	
			-ping scans
			-port scans
			-trace route
	4.) Visibility
			-determine services on the target machine(s)
				-port scanners
			-determine versions
			-determine OS
	5.) Vulnerability Scanning
			-not doing this for our project
			-configuration errors
			-program errors
			-procedural errors
			-Use security Databases for this 
	6.) Web assessment
			-not doing this for project
			-admin backdoors
			-input sanitization
			-Cross site scripting
			-tools OWASP, Zeus, WebSleuth
			-badstore.com is a cool way to play with sql injection

Networking Background
-TCP
-IP
-UDP
-FTP
-TFTP
-TelNet
-SSH
-SMTP
-HTTP
-HTTPS
-DNS
-DHCP
-802.11.x
-ARP
-ICMP
-Ethernet

Ethernet
-several computers connected by a wire
	-computers have a NIC attached to them
		-Network Interface Card (nowadays its not a card, but still called a NIC)
-all computers could be connected back to a common box
	-hubs, switches, routers
	-Hub 	-> repeats signal to everyone as if all 
				computers are connected to each other
		 	-> cables can only be so long, and must be
		 	   3 meters between taps
		 	-> timing to allow time to detect collision
		 	-> twisted pair or coax
	-Switch -> can connect computers 1 to 1 using MAC 
			   addr.
			-> gives you more capacity on your network
			   because multiple pairs of computers can talk at once
			-> self learning
			-> has queues if numerous computers try to
			   communicate with the same computer at once

Ethernet frame
preamble  dest.addr src.addr  type   payload	CRC
 8 bytes	 6 			6 		2 	 46-1500	 4

preamble
	-says something like hey there is a frame coming
	-it allows you to lock onto the frame
destination address
	-where its going
		06:34:28:5F:3C:29	- sample MAC address
source address
	-where it came from
type
	-protocol of payload
	-code for type of communication in payload
	-Examples
		-IP 0800
		-ARP 0806
payload
	-data
CRC
	-burst errors
	-not integrity

Example Ethernet
A <-> B <-> C
Lets Say A wants to send to B

Dest SRC  Type  	  	Payload 
		  0800	IP header,options, Data
		  (IP)
-destination - mac address of the next computer in the 
			   chain you are sending to
-source - mac address of current computer sending the
		  packet
-uses ARP request to get hardware address from protocol address
	-specifically here to get the MAC address from IP address
		-source (computer A) sends an ARP broadcast
			-has FFFFF as Dest., src is MAC addr. of source
			-no IP header
			-payload says who has this IP and target MAC address in payload is all 0s
			-type is 806 for ARP
		-dest. with correct IP (computer B) receives ARP and responds with an ARP
			-has computer As MAC addr. as Dest., and Computer Bs MAC addr. as Source
			-type is 806 for ARP again
			-no IP Header
			-payload says I have IP ...
-then sends out packet with correct MAC addr.
-keeps track of correct IP MAC combos for awhile

How does A know it can't talk to C
	-its on a different subnet
	-it looks at IP address and subnet mask

	IP 192.168.1.5
	11000000.10101000.00000001.00000101

	subnet mask 255.255.255.0
	11111111.11111111.11111111.00000000
	take IP and AND it with subnet mask

	11000000.10101000.00000001.00000000
	Network addr. 192.168.1.0

	subnet tells you of IP address, which parts form your network address
	As IP is 192.168.1.2
	since Cs IP address is 192.168.3.3 we know that they can not communicate
	-so use routing tables to go through B to C

Example of sending packet from A to C

A sends this to B
  DEST     SRC    Type  DestIP  	 SRCIP      Payload
00:..:03 00:..:02  800 192.168.3.3 192.168.1.2	

B says I am not this dest. IP so I need to forward it on

B doesn't know Cs MAC address
-B sends ARP just like above to C
-C responds with its MAC address in another ARP
B sends packet to C

-so the IP src and dest don't change along the way, but the MAC dest. and src. do
IP
-IP header has Dest, source, type
-gets you to people who aren't your immediate neighbors


-buffer structures used in nested types where you keep adding headers on the front end

Prefix 		Suffix 		Address 	Purpose
0's 		0's 		me 			Boot time
Network 	0's 		network
network 	1's 		broadcast on specific network
1s 			1s 			broadcast on local network
127			x 			loop back 	testing           

IP has a payload
-2 major types of payload are TCP and UDP

TCP
-connection oriented
-1 to 1
-streaming
-acknowledged - will retransmit
-throttling- limiting the amount of bandwidth you are allowed to occupy on network when congestion, and then returning it to normal when congestion is removed
-b.c. of connetion-oriented there are protocols that enable you to add security on top
-flow control
	-If you don't want to overflow someone's buffer then you can stop sending packets until a machine says it can handle more
	-computer to computer
		-1 says I have room for x so sender says ok ands sends it
		-then destination says okay now I can handle Y and so sender sends Y
	-problem is if no response, the sender will retransmit and will assume congestion-> so sender will speak slower and louder

UDP
-connectionless (vs. connection oriented)
-allows for broadcast (vs. 1 to 1)
-less overhead
-datagram (instead of streaming)
-unacknowledged (vs. acknowledged)
-fire and forget (vs throttling)


streaming
-in order-like him talking to us-you hear a stream of sounds and receive them in the order he is speaking them
-we don't know what sounds go with what so we have to parse the data
-have to do all of your own framing, not uniformly sized payload

Datagram
-all 3 letters show up in mailbox, but not necessarily in the right order
-but when you get a letter, it will be the complete letter

-when you get to destination with TCP
	-TCP port will use the port # to tell you which server to go to HTTPS server, SMTP server, etc.
-same with UDP
	-except, if queue is full then it throws out extra packets

-covert channel
	-on top of UDP
		-put text message in payload 
		-send a covert message behind it saying attack at dawn
		-could play with timing b.w. packets to send secret message
		-could modify source port and do something interesting with source port
	-could try to put it on top of IP with padding
	-could try using ARP (but would have to stay on your local network)
	-have to always consider how much covert information can you send in relation to clear text
		-easy to hide 1 byte of covert info in 1 kb of cleartext info
	-some things would require raw interfaces, but you would need root access
		-so you could do it on your own comp
		-with admin you could do 
	-TCP is difficult to do 

-------------------------------------------------------

Adv Network and System Security Lecture 4 Notes

Project 2 Due Feb 26th
Project 3 Due Marh 19th
Midterm Mar 26th

Assignment 2
-usually people do it with TCP UDP but sometimes ARP

Current Events

Anthem insurance got 80 mill records hacked

Steganography Covert Channel sent message through pop song

Entropy

	 H
TTTTT_TTTTTTTTTTT
-if its tail it doesn't mean a whole lot, but a head would be more interesting
-when something occurs less often it conveys more information

log_2(1/P_i) P is the probability of the symbol i

log_2(1/(1/16)) = log_2(16) = 4 bits

T = log_2(1/(15/16)) = log_2(16/15) = .0931 bits

So entropy in whole thing = .0931*15 + 4*1
							______________ = 5.3966/16
								  16

each character on average is .3373 bits

A  B  C   D
00 01 10 11


A A A A A A A A   B  B  B  B  C  C  D  D
0000000000000000  01 01 01 01 10 10 11 11   32 bits

A -> log_2(1/(8/16)) = 1 bit of entropy

B -> log_2(1/(4/16)) = 2 bits

C -> log_2(1/(2/16)) = 3 bits

D -> log_2(1/(2/16)) = 3 bits

Average entropy 
	8 As * 1 bit/A + 4 Bs * 2 bits/B + 6 CDs * 3 bits/C

= 1.75

Sum_i log_2(1/P_i) * P_i 	Average entropy per symbol

if the bits are uncorrelated the best you can do with compression is 1.75 bits per Letter

00 .3 A--------------------
   					   	  |0 			0
10 .2 B-------------    .6|---------------
    			  	|	  |			      |
010.15 C-- 	  	    |     |1		      |
   	   .3|----------------  		      | 		<-
011.15 D-- 		    |				     1|------
   				    |____________0	      |
1110.05 E-- 0		    	     |	      |
   	     .1|------ 1	   	   .4|-------- 1
1111.05 F-- 1     |			     |
   			    .2|-------------- 1
1100.05 G-- 0	  |
   	     .1|------ 0
1101.05 H-- 1

				10111011101111

				Huffman Coding

.3 x 2 		.6
.2 x 2 		.4
.15 x 3 	.45
.15 x 3     .45
.05 x 4     .20
.05 x 4     .2
.05 x 4     .2
.05 x 4     .2

 remember P_i * log_2(1/P_i)


.3 * log_2(1/.3) = .5211
.2 * log_2(1/.2) = .4644
.15 * log_2(1/.15) = .4105
.05 * log_2(1/.05) = .2161

Summation = 2.67

Algorithms Dosgupda page 150

lower entropy means less randomness

IF 50 50 split then 1 bit represents 1 bit of information

IF 60 40 split then 1 bit represents < 1 bit of information

26 letters 4.7 bits/letter
27 letters 4.67 bits/letter

Covert channel
-program that sends and a program that receives
-look up a UDP sender and receiver
	-that way I wouldn't need to write it
	-modify parameters of UDP, like port or headers, etc. 
	-could look at standard of UDP and rewrite sender so that it opens a raw socket (IP) and create the UDP header yourself

-can just use 127.0.0.1 network, so that the UDP is working, and then start adjusting it to handle covert info
	-receiver can handle both the covert and the normal information

Quantum Computing
-quantum properties
-trade off b.w. error and time constraint
-checks numerous things at once
D-Wave

2 Slits in a pool and splash a wave at the 2 slits
-part of wave will go through each slit and on the other side an interference pattern would be created with each wave

-change it to use an observer and particles
-the particles form expected distributions once they are observed
-when you observe the particle its behavior collapses into a 1 or a 0
Light behaves as particle and wave at the same time
-have particle cannon

Spin Paired Particles
-when you change the state of one the others state changes as well
-once it collapses, you can only use it once, because it collapses and thats its value
-defies speed of light property - faster than speed of light

Photons and polarization of photons
100110


-------------------------------------------------------


Advanced Network & System Security Lecture 5 Notes


Current Events

100s of banks attacked around the world to spew out money
-millions stolen
-recorded behavior of employees when conducting transactions

Malware that reprograms the firmware on disc drives and hides itself there

Stucksnet-NSA involved

Samsung TV
-many cases it does not send voice over the line
-often times it does for complicated requests
-it is sent in the clear an easy to look at
-US Marshals are auctioning off 11 million dollars in bit coin.
-$200/bit coin
-need $100,000 or $150,000 if you want to even be able to bid

OpenStack
-IaS
-have some security and efficiency features that can be manageable by small teams
-NSA provided

Quiz 1
ARP request
To 		From 		Payload ARP
 					ARP who has 192.168.1.5
FF... 	FF 							|
 					requested protocol address
  |______|
  	  |
mac addresses



quantum
-up and coming
-looks like it will be revolutionary

BB84
-have a quantum channel and clear hannel
-clear
	- people can hear you
	-good
-quantum
	-know if listener
	-lossy
	-can't send important data b.c. lossy
	-not safe, you just know if its been heard
-send random bits over quantum channel and decide which bits were correct over clear channel
-use this as one-time pad to encrypt clear channel
-can add error correction before encrypting with 1 time pad
-reasons why one-time pad are good
	-can't do freq. analysis
	-provably secure
		-use random data only once for pad
	-helps for error correction as 1 bit errors don't propagate through


-Send photons down a fiber
-polarize them horizontally or diagonally
	-up left, up right, up, right corresponding to 0,1,0,1
-value changes on observation
-have to decide if you are going to use x filter or +  filter
Ex:
polarize type, value, what gets sent over fiber
+ 0 up
+ 1 right
X 1 up right
+ 0 up
X 0 up left
X 1 up right
+ 1 right
X 1 up right

vertically polarized means wave form going up and down in relation to whatevers up

if up and a + filter is put on it
 		 0
^ 		|
|		|
| ______|______ 1	put filter and determine 	
|		| 			which had energy (vertical in this)
        | 			case
-filter would recognize wave as 0


^ 		0
|      X
| 		1
-wouldn't know which one it would go through and it will be random which one it will come out of.  It will also change its polarization to be one of the 2 diagonal ones.  So 50 50 chance it will be wrong.

-receiver has to guess which filter to use

   							guesses
+ 0 up 						x 1
+ 1 right 					+ 1
X 1 up right 				+ 0
+ 0 up 						x 0
X 0 up left 				x 0
X 1 up right 				+ 0
+ 1 right 					+ 1
X 1 up right 				x 1

So these are your random bits obtained from guessing the filter and getting the data over the quantum channel
-now go back to clear channel and discuss results
-first -> I used x what did you use? + so wrong,don'tuse
-second-> I used + what did you use? + so keep
-third-> I used + what did you use? x so wrong, don'tuse
-fourth->I used x what did you use? + so wrong
-fifth->I used x what did you use? x so keep
-sixth->I used + what did you use? x so wrong, don't use
-seventh->I used + you used? + so keep
-eighth->I used x you used? x so keep
so random one-time pad is
1011 assuming noone is listening to you
-remember you only keep bits where filters matched and bits matched

know if someone is listening
-person in middle has to add a filter and they also guess
-they know if listener using probabilities
	-if the sender and receiver see that they had a 100 bits that they agreed on the filter, but half of them were wrong then there's a good chance that someone was messing with them
-you grab a random group of agreed upon filters and see if the bits match up
	-if too many don't match up (to be more than your accepted error threshold) you know someone is listening
-this means you have to sacrifice more bits
	-of 100 you used same filter you might take half and check for if bits also match to determine error

-every bit of your message is encoded with a unique bit from your quantum channel

-if someone is listening, what is the probability that they will modify the bit

or what is the probability that it will not be changed
75%

-if they choose the right filter it works
-if they choose the wrong then it is a 50 50 chance of getting the wrong random option
-.5*.5 = 25% chance of wrong

1-(3/4)^5 = 76.3 percent chance you will catch a listener if you choose 5 bits
(3/4)^5 = the probability that none of the 5 bits have changed, so 1-(3/4)^5 is the probability that at least 1 has changed


Entropy 			Temp (T)
			cold 		mild 		hot
m 	low 	.1 			.4 			.1  		60%
	high 	.2 			.1 			.1 			40%
 			30% 		50% 		20%
	

	humidity = m

	H(m) .6lg(1/.6) + .4*lg(1/.4) = .97

	H(T) = .3lg(1/.3) + .5lg(1/.5) + .2*log(1/.2) = 1.48

	H(m) + H(T) = 2.456 

	If these 2 were disjoint that would be the entropy of the whole system

	2 find entropy of the whole system

	H(all) = 4*.1lg(1/.1) + .4lg(1/.4) + .2lg(1/.2)
		   = 2.32193

	H(T) + H(m) - H(all) approx= .1345

	Since entropy of whole system is less than entropy of sum then there is some overlap
		-meaning knowing one gives some information about the other

H(m | T=Cold)

Entropy 			Temp (T)
			cold 		mild 		hot
m 	low 	.33 		.8 			.5  		
	high 	.66			.2 			.5 			
 			 		

H(m | T=Cold) = .33lg(1/.33) + .66lg(1/.66) = .918

H(m | T=mild) = .8lg(1/.8) + .2lg(1/.2) = .72

H(m | T=hot) = 1 (50/50 split)

H(m | T=Cold) + H(m | T=mild) + H(m | T=hot)

We can weight these, we know we are cold 30% of the time, mild 50 percent and hot 20 percent
so..
Entropy when temperature is known of humidity
	.3*.918 + .5*.72 + .2*1 = .83


Entropy of humidity when temp is not known - entropy when it is

.97 - .83 = .1345


Venn diagram 
Temp = 1.48
Humidity = .9709
overlap = .1345
Temp only = 1.48-.1345 = 1.35
Humid only = .97 - .1345 = .83

As an exercise calculate entropy of T given humidity

Asset Characterization
Grocery store
Assets
				attributes 				value
							repl. reven. profit val.
frozen  	ice 			100k  150k   50k    150k
inventory	icecream



equity 		cash 								580k
			income
			building
-----------------------

Threat ID
						motivation 			action
	customers 			greed 				slip n sue

	power failure 		--- 				no power


------------------------

Vulnerabilities
	-frozen assets must be kept cold
	-floors are slippery when wet
------------------------

Controls
	-signs and mat to dry feet
	-UPS for 30 minutes back up power

------------------------

Vul-threat pair

power failure for 48 hours thaws frozen food

	Impact 		= 150k
	likelihood	= .05%/year
	Risk = I*l = $7500
customer slips and sues for equity

	impact 		= 580k+
	likelihood 	= .5%/year
	Risk = I * l = 29k

------------------------

Reccommendation
	first vul-threat pair
		generator/freezer-> cost $9000
	second vul-threat pair 
		insurance -> only $500 a year


--------------------------------------------------------

Advanced System and Network Security Lecture 6 Notes

Current Events

silent...noone pushed the fuckin button...

Project 3
get a file witha number, salt, MD5 hash, and place for us to put the password used

salt is a group of characters you add to a given password to make it harder to crack
-stops you from being able to use precomputed tables
-add salt to the beginning

never store password in clear text
-store password hash
-so no DBAs have access, if DB gets hacked all passwords released
-

-cant use current classmates
	-crack as many MD5 passwords as possible
	-suck the file into excel and add password answers

-make a plan first

Passwords vs Keys
-size

Key Machine
Password human

Group A 	6 chars and 1 nonletter
Group B 	use pass phrases 4sa7yago
Group C 	8 random characters


56   b = bits in password
1024 = 2^10   e = entries in password file
.25   P = probability a password is in the dictionary 
d=20 d = 2^d = dictionary size
										Avg. 
Salt 		Dictionary 		Password 	effort C# hashes
N 			N 				Admin 	 	2^56/2 =2^55 
Y 			N 				Admin 		2^55
N 			N 				Any 		2^55/2^10=2^45
Y 			N 				Any 		2^55
N 			Y 				Admin 		.25(2^19)+.75(
										2^55) = 2^54.6
Y 			Y 				Admin 		"
N 			Y 				Any 		P(2^(d-1)) + (1-
										P)(2^b-1) = 1
N 			Y 				Any 		2^19
Y 			Y 				Any 		2^D/p = 2^22

.75^1024  ->probability that nothing is in dict.
.75^2 = 9/16  -probability
.75^4 = .33
.75^4 < .75^3 so .75^256 < 1/(3^256)

1-.75^1024 is odds something is in dictionary = 1

chances of finding first one
.25*(2^19) + .75*.25(2^20+2^19) + .75^2*.25.25(2*2^20+2^19) +.. .75^3*.25.25(1023*2^20+2^19)

converges to 
approximately 2^20/.25

	(2^d)/P = 2^20/.25 = 2^22

Be able to regurgitate these 8 cases

difference b.w. lossy compression vs. lossless
-lossless you get the exact same thing back
	-zip, huffman encoding
	-set the quality of I don't want to lose anything, and then the file is what it is based on algorithm
-lossy
	-jpeg, mp3
	-can get smaller with lossy
	-can set file size, and then adjust accuracy to fit that size
	-multiple images can give you same compressed output

all the original files the algorithm will act on

1 						
0 -> 
00
01
10
11
0000
001
10
11
000 -> compresses to 0
100
101
110
111
	0000
	0001
	0010
	0011
	0100
	0101
	0110
	0111
	1000
	1001 -> compresses to 000
	1010
	1011
	1100
	1101
	1110
	1111

-this means that something from left column must get larger (with lossless only)
-could say if it has to get larger don't compress it
	-what if send bit 1 as a packet 
	-does it interpret this bit as compressed 1 or normal 1
	-still need to add a flag to say if it was compressed


2kb  File 1 ->compress-> C(F) + h

2G 	 File 2 ->compress-> Fh


LZW compression

Google Search

LzW applet

set W = nil
loop
	read a character k
	if wk is in the dictionary
		w = wk
	else
		output code for w 
		add wk to dictionary
		w = j
endloop

Ex: compress ABCABCABCABC using LzW

Dictionary 	0
			65  A
			66  B
			67  C
			.
Fixed		.
			.
		  	127 
_________________________
		  	128 AB
		  	129 BC
Dynamic	   	130 CA
		  	131 ABC
		  	132 CAB
		  	133 BCA
		  	255

char 		K 		W 		Output
-		undefined 	nil 
A 			A 		A 		
					
B 			B 	    		65
					B
C 		    C 			     66
					C 
A 			A 				 67
					A
B 			B 		AB		 
					
C 			C 		  		128
					C
A  			A 		CA		
					
B 			B 		 		130		
					B
C 			C 		BC 		
A 			A 		 		129
					A
B 			B 		AB
C 			C 		ABC
eof 		eof				131
					eof

output stream
65 66 67 128 130 129 131

algorithm for decompression

read char k
entry = dict[k]
output entry
w = entry
loop 
	read char k
	entry = dict[k]
	output entry
	Add w + first character of entry to dict
	w = entry
end loop

benefit over huffman encoding is you don't have to send the dictionary

			0
			.
			.
			.
			65 A
			66 B
			67 C
			.
			.
			.
			127
	___________________
			128 AB
			129 BC
			130 CA
			131 ABC
			132 CAB
			133 BCA
			.
			255
Read 	Entry 		K 		W 		Output	
65 		 A 			65 		A 		 A
66 		 B 			66 		 		 B
							B
67 		 C 			67 		 		 C
							C
128		AB 			128 			 AB
						    AB
130 	CA 			130   			 CA	
							CA
129 	BC 			129 			 BC
							BC
131		ABC 		131 			 ABC
							ABC

ABC ABC ABC ABC gets smaller so the rest of the letters get larger


can use seven bits before compression, but after compression you double the size of what you have to represent 
0-127 w.o compression
-represent with 7 bits (2^7 = 128)

65 66 67 65 66 67 65 66 67 65 66 67
12 numbers with 8 bits per number = 84 bits b4 compression

with dynamic part of dictionary added

128...255 all of a sudden we need 8 bits per number
b.c. 2^8 = 256 (0-255)

-natural trade off with dictionary size
-if dictionary is too large you are sending extra bits you don't need

with our example
 7 bits * 12 = 84 bits
 8 bits * 7 = 56 bits


Project 4

How does steganography differ from a covert channel?

modern day examples of steganography?
-watermarks
-currency
-1 movie frame
-read first letter of every line
-tattoo head
-printers
-math tables


-------------------------------------------------------

Advanced System and Network Security Lecture 7 Notes
(8 in the list)

Mar 26th = midterm
Apr 2nd = project # 4 assigned
Apr 9th = Taped on April 1st
April 16th = Project #4 Due
April 30 = Review
May 7 = Test #2 6:30PM

Current Events
-Flip 1 specific DRAM bit to get access to a system


MiM attack
-trick servers into using weaker encryption

health insurance company 

-huffman encoding quiz I reversed the bits


A 35-----------------------0
B 25---------------0       |------90
C 10----------0    |------55
   0      0   |    | 		1
D 5______10   |---30 		
E 5 	  |- 20    1
   1      |    1
F 10------1    

A = 0
B = 10
C = 110
D = 11100
E = 11101
F = 1111





huff enc on test



hash cracking

brute force

b = bits in password
e = entries in password file
p = probability a password is in the dictionary
d = 2^n = dictionary size

MD5 
b = 56
1024 = 2^10
1/4
d = 20

no salt- no dictinoary -specific password- 2^n/2 = 2^55
salt - no dictionary-specific password = 2^55
no salt - no dictionary -any passwird = 2^(b-1-e)

Remember 9 phases

-diff b.w. threat and vul
-risk , likelihood
-risk is measure in $$


ABABAB e.o.f.
-review LZ encoding

set w = nil
loop
	read a character k
	if wk exists in the dictionary
		w = wk
	else
		output the code for w 
		add wk to the dictionary 
		w = k
endloop

A = 65
B = 66
256 B of Dict.
-need to be able to make dictionary and output code

ABABAB eof

Char 		K 		W 		OUTPUT
A 		 	A 		
 					A
B 			B 		 		A (65)
					B
A 			A 		 		B (66)
 					A
B 			B  		AB

A 			A 		 		AB (256)
					A
B 			B 		AB
eof 		eof 	 		AB (256)

Dictionary
A 	= 65
B 	= 66
.	  .
.     .
	 255
---
AB 	 256
BA   257
ABA  258


S 									R 	 		Keep 
 			arrow sent					0/1 		 y/n
0+ 				up				x 		 0       N
1x 				upleft			x 		 1       Y
1x 				upleft			+  		 1       N
0x 				upright			x 		 0       Y
0+ 				up 				+ 		 0       Y
0+ 				up  			x 		 1       N
1x 				up left			x 		 1       Y
1+ 				right			+ 	 	 1       Y
0x 				upright			+ 		 1	     N
1x 				upleft			x 		 1       Y

up is 0
up diagonal right is 0
   
if what receiver uses and what sender uses for polarity differ then you just guess the bit received
	-this bit then gets thrown out later

So what is used is
1
0
0
1
1
1
-would never use this to send because people can see what you are sending, and half your bits don't get received

-guy on the end knows if someone in the middle is messing it up by sacrificing a few bits
	-you verify a few bits and see if what was sent matches - if too many don't match (as in it is not within your range of acceptable error)
	you throw it out saying someone was listening
	-you have to throw out the bits you used to verify
-this is designed to share a one-time pad with someone while verifying that no one is listening

TCP 				UDP
backoff 			connectionless
ACK 				less overhead
throttling 			Datagram
stream 				multicast
ordering 			
point to point

Machines and MAC addresses and be able to draw the network
-know what the MAC address is and what the IP address is based on each hop in the network
-know ARP - mac addresses on the packet (broadcast dest)
		  - know the response says I have this MAC addr.

IP192.168.3.5 						192.168.3.1
MAC	0C:...:02 							0F:...:09

	Machine ---->through network ----->other machine

knows IP address but doesn't know MAC address
-packet needs dest. MAC address for packet
-sends out a packet to everyone
	FF:...:FF | :02 | ARP Req who has 3.1
-receives
	:02 | 09    | I have 3.1 I am :09


2nd example with 2 hops

comp 1 IP = 192.168.3.5
comp 2 IP = 192.168.3.1 (on comp 1 side)
comp 2 IP = 192.168.6.4 (on comp 3 side)
comp 3 IP = 192.168.6.7

MAC of comp1 = :02
MAC of comp2 = :09 (on comp 1 side)
MAC of comp2 = :08 (on comp 3 side)
MAC of comp3 = :0C

comp1 sends out 
destMAC| MACsrc| dest. IP |   src IP

FFFF.. | : 02  | ARP who has 3.1 
	
	-because needs 3.1 to forward it out
gets response back from router
:02 | :09  | I have 3.1 I am :09

so comp1 sends to comp2
:09 | :02  | 6.7  |  3.5 	

comp2 says
FFFF.. | : 08  | ARP who has 6.7

comp3 says back
:08  | :0C  | I have 6.7 I am : 0C

comp2 sends to comp3

:0C  | :08   |   6.7    |  3.5



lossless vs. lossy
-lossless
	-fix quality, but size will vary
		-will even get larger in some cases
	-huffman and lzw
-lossy
	-guarantee smaller size, but will lose information in some cases


-duplicating a cd or dvd will sometimes result in better quality, because there is a lot of error correction
	-a scratched disc could be recovered





-------------------------------------------------------
review for test ()

system asset characterization
threat identification
vulnerability identification 
control analysis
likelihood determination
impact analysis 
risk determination
control recommendations
documentation

lzw 
received
65 66 67 256 258 257

k 		w 		output 		entry 	Dict
A 		A 		A
B 		B 		B			 B 		AB
C 		C 	 	C			 C 		BC
AB      AB 		AB			 AB     CA
CA      CA      CA           CA     ABC
BC 		BC 		BC 			 BC     CAB

ABC ABC ABC
-------------------------------------------------------
Advanced System and Network Security Lecture 8 Notes
(9 was test so this is 10 on the list)
steganography
-hiding data in another 

steganography is hiding data
-could be a way of implementing a covert channel

images are really popular for steg

BMP
-pixel = picture element
-resolution= # of points
	36 Megapixel = 5253 x 7182

	R 		G 		B
  0-255    0-255   0-255

  255 		0 		0 		Red
  	0 		0 		255 	Blue
  255 	  255 		0 		yellow
  255 		0 	  255 		magenta
    0 	  255 	  255 		cyan
  255 	  128 	  128 		pink -> adding some of 
  									other 2 adds white to red
  255     255     255 		white
    0       0       0 		black
  128	  128     128 		gray

  hide data in low order bits b/c your eye wouldn't notice it

  GIF/TIFF

  0 	black
  1 	white
  2 	red
  3 	green
  3 bits for each
  -changing low order bits here would change color completely

  JPEG
  -histogram
0-255 		grayside

-histogram equalization
-put some number of pixels at every spot

-tries to spread out pixels to even distribution, but if it can't spread you out, it gives you space saying if you were spread out, this is where you would spread out to

-discrete cosine transform basis functions (n=8)
	-do it in 2D

-run DCT over image you see how much something is represented
1.) scaled image (p = p-128) - centers you at 0 
2.) run DCT & get values
	
	top left represents solid white - as you go down high frequency in horizontal stripes

	as you go right high freq. in vertical stripes

	Quantization - where lossy part comes in 

	B_j+k = round((A_j,k)/(Q_j,k)

Quantization matrix
-defines what quality of image you want
-embeds this w/image

divide by 16, round, and multiply by 16 & read out diagonal

-remember always do this with 8x8 chunks of image
-don't want to do too much from compressing
-overlay the 8x8 grid over each of the 64 blocks
	-however much gets stored in that block
-each value represents how well your 8x8 block matches each of blocks in quantization

-value of Q shows quality of quantization matrix - 6 higher quality than 9

DCT 		Q
8 			16 	-> 1  => 16
7 			16  -> 0  => 16
20 			16  -> 1  => 16
25 			16  -> 2  => 32     0
5 			9   -> 1  => 9      6  => 2 => 12

if you lose quality with quantization then you won't gain that quality back by quantizing at a higher quality
-if image isn't uniform you can make some assumptions about history

JPEG compression throws away high frequencies
-not easy to hide things in JPEG b.c. if removes things that aren't visually important

Proj. 4
-they will have straight forward encoding but that won't be scrambled

1 message/file
-determine password 97 for E.C.
-due 4/23


-------------------------------------------------------


Advanced Network and System Security Lecture 11 Notes

-current events
	-some twitch accounts were hacked
	-hippa didn't take security audits seriously enough

Project # 3
-dont use word for password
	-even salted made no difference
-w0rd
	-words with some letters changed to #s
-wordnumber
	-easy to find
-capitalizing first letter word
	-easy
-phrases
	-need to be random words not phrases
-only bruteforcable - random lowercase letters

-entropy is a really good measure of how hard your password will be to crack

password security the slow way
-salts won't save you

-admin should be running password cracker
	-either need to educate people on weak passwords, or prevent them from ever being created, and change the weak ones

Guide to Bluetooth Security
by NIST (National Institute of Standards and Technology)

V1.2 2003 1mB 			basic rate 			GFSK
V2.0 2004 2-3 MB	  enhance data rate 	DPSK
											8DPSK
V2.1 2007  '' 		  EDR 					''
V3.0 2009  24 mB 	 	ifs 				OFSM
V4.0 2010  1 MB       LE (low energy) 		GFSK

OOK
-on-off keynote
0 	1 	0 	1 	1 	0
---wave ----wavewave----
-frequency is 1/P
-amp is height

ASK 	amplitude shift keynote
+++++wave+++++Wave+++++++++
-little waves around big waves
-am radio
-can do altered ASK with 4 different waves sizes instead of 2
	-lets you send 2 bits per baud
		-baud is change in signal

frequency	
-adds security
	-frequency hopping
    -frequency based hopping pattern they will have a harder time 
    -avoid jammers

frequency shift key
0 	1 	0 	1 	1 	0
slow fast slow fast fast slow
-slow means less cycles over a time period (less bumps)
-this corresponds to sound waves of FM radio

Gaussian FSK
-shape wave form with a gaussian filter
-gradual change from 0 to 1
-makes radiator pattern nicer
	-change spot involves a bunch of high frequencies to shift from high frequency to low frequency - this smooths that out

Binary Phase Shift Keying BPSK
-wave form 
-a second wave form which is shifted by 180 degrees
-first wave is 1, second wave is 0
-you would just transmit the wave corresponding to 1 and 0 for whichever bit you want

QPSK Quadrature Phase Shift Key
-have first wave 
-second wave has completely out of phase version (shift by 180)
-third wave is 90 degree shift
-4th wave is 270 deg. shift
-each wave can now represent 2 bits
	-can send same amount of data in half the time

8PSK
-has 8 waves
-original with 7 shifts
-each wave has 3 bits of information

-as the number of PSK goes up you need better signal to noise ratio

-normally qpsk has everything shift by 45 degrees
     *
	 |
  *--|--*
	 |
     *

  *     *
	 |
   --|--
     |
  *     *

DPSK - differential psk
-change matters for the original 4 dots
	-i.e. there might be a 90 degree change matter 
		- * on pos horiz would be pos verti
		- * on neg vertical would be pos horiz

-16 QAM and 64 QAM
-changing phase and amplitude

Types 		power 		range  		sample device
-class 1 	100 mW 		100m 		usb adapters,
									access points
-class 2    2.5 mW 		10M 		mobile devices
									-speakers, keyboard (most)
-class 3 	1 mW 		1 M 		bluetooth adapters
bluetooth LE 10mW 		50m


-------------------------------------------------------

Advanced Network and System Security Lecture 12a Notes

For final study stuff from first test, and second test

start with jpeg image 

subtract 128 from every pixel value to center it at 0

do discrete cosine transform (DCT)
-for top right value you look at how white the image is
-for 1,2 check how much something is white to black
-the more negative a value for all these the less of a match it is

-each block as you move left to right adds a half period of a cosine wave

i.e. top left is freq.=0
	 1,2 = 1 full period
	 1,3 = 1.5 periods, etc.
	-thats why it is called a discrete cosine transformation

use quantization matrix-there is no standard
	the Lossy step is B_j,k = round((A_j,k)/Q_j,k)

	round(-415/16)
	-you end up getting something with a lot of zeros

	-if you want more compression then Quantization gets larger

	EX: after DCT

		9 						16

			image 			-> 	Quantization
			matrix


		1 						16
			quantized 		-> 		regenerated image

if you want higher quality then the quantization value goes down (on final)
	-this is because there are more values, so you are rounding up and down less
EX: 	
 	16 			 10 				2
 			->  quantization 	->  quantized matrix ->
 				matrix
  img matrix

-> 20
 		regenerated


**never recompress a jpeg
		-even if its a higher quality it will still add noise to your image
		-never help you and usually hurt you

X   -> Q = 11 -> regenerate -> Q=5 	-> 		y
 	  quantize 				 quantize

-on final
if had just quantized by 5 and renerated you would get
y included {0,5,10,15,20,25,30.....100}

if you had originally quantized by 11 then regenerated and quantized by 5 what can you get

y included {0,10,20,35,45,55,65,75,90,100}
 		     			

x incl in [0,100] -> quantized by 11 and regenerated =
								z = 0,11,22,33...99


steps 1. have pixels
steps 2. pixels -128
steps 3. DCT of pixels
	(0-100)
steps 4. Quantize (divide and round)
steps 5. regenerate (multiply by quantization matrix)

-you expect a distribution in your possible values 
	-want it to be evenly distributed buckets
	-10s but no 5s mean the image has a previous history of compression
	-if it hasn't been compressed then it would have uniform possible values

-if part of image has a compression history that the other part doesn't then you can tell it was tampered with
-based on possible values you could try to figure out what type of camera was used based on quantization matrix

Ex: quantized and regenerated
-> then quantized at 5 and regernated and you go

0 15 25 40 50 65 80 90 105
-what was it originally quantized at 

what gives you a 15
13-17 (13/5 = 3*5)
what gives you 25
23-27 (23/5 = 5*5)

common multiple in these 2 is 13

TIFF 186 kb


original image and blur it
-(could do gaussian or uniform)
original image -  blurry image = non-blurred of image 
original image + non-blurred image (high boost filtering)

can use gradient to see angle light is hitting each face
-plot gradients to see if something was photo shopped in
	-if light was hitting one person's face at a different angle then it was added in separately


-could show that the laplacian is the unsharp mask


----------start of 12b


Quiz
1. What is steganography?
2. How much entropy does a double-headed coin have when flipped playing "heads and tails"
3. Give an example of the wave forms for encoding 0 0 1 0 with the following modulations
	a. OOK
	b. ASK
	c. FSK
	d. BPSK
4. Public writings, in steganography, embed messages between allies; researchers report also seeing "secrets" in nonpublic gifts.
	Give 3 examples of steganography in every day life
5.  Consider a bit-mapped image and an indexed color image
	what steganography techniques will apply to both of them?

	Which ones will differ between them?


-------------------------------------------------------

Advanced Network and System Security Lecture 13 Notes

Quiz answers

1. What is steganography?
-covered writing
-hiding a message, or data in another message or data
-how would it differ from covert channels
	-you could use stego to implement a covert channel
	-covert channels have tranmission properties
		-not static
		-still hiding, but has transmission

2. entropy in a double headed coin
	-always same answer, so randomness or surprise is 0

3. Give an example of the wave forms for encoding 0 0 1 0 with the following modulations
	a. OOK - on off key
		usually you have a carrier moving at a certain GHertz and you modify it
		-either you do have it or you don't have it

		______|  |   __
				| 
		0   0   1     0 
		0GH
		0GH
		2.4GH
		0GH
		ex: tv remote with infrared (on or off for 500 micro seconds)

		ex2: constellation
			   |
			___*___*
			   |


	b. ASK - amplitude shift keying
	0101
	   		   |
			___ __*__*
			   |
            | |     | |
		    | |     | |
		| | | | | | | |
		 | | | | | | | |
		 	 | |     | |
             | |     | |
        2.4GH soft
        2.4GH Loud
        2.4GH soft
        2.4GH loud
		-always little waves and higher waves at peaks
		-take wave form and multiply it by your carrier
		-puts an envelope around wave and moves it out to Megabyte
			-first thing you do when you receive it is bring it back down
	c. FSK - frequency shifting
		-5k 15k 5k 15k
	after shift get
		2.4G+5k  2.4G+15K  2.4G+5k 2.4G+15K
		|    |   | | |     |   | |
		   |    | | |   |     | | |
		slow 	fast 	slow 	fast
		0 		1 		0 			1
		-no constellation for this one
	
	d. BPSK- binary phase shift keying

	   you have carrier
	   |   |   |   |   |
         |   |   |   |   |
       
       |   |     |     |
         |   | |   | |   |
 	    -0---- 1-----0-----
 	    0 stays in phase with it, and 1 is out of phase with it

 	    constellation is either in phase or completely out of phase      |
 	    				*_ _* 	BPSK
 	    				  |

 	    				  QPSK
 	    				* | *
       					__ __
 	    				  |
 	    				*   *

 	    					16 QAM
 	    				hs 4 bods in each quadrant
 	    				-each bod represents 2 bits

 	    					64 QAM

 	    				has 16 bods in each quadrant
-benefits of having more Megahertz
-more bandwidth means the faster you can switch b.w. 0 to 1

-differential doesn't tell you whether its 0 or 1, but rather the change

-how many wave form changes do you need to change 16 bits to send
	-with BPSK how many wave form changes do we need
		-15 - each change represents 1 bit
	-with QPSK
		-8 because each change represents 2 bits
	-with ASK with 8 amplitudes
		-with 8 amplitudes, each change represents 3 bits
		- 6 changes (3 3 3 3 3 1)

-way to get most data though pipe
	encode with as much forward error correction as possible and use as high data rate as you can to compensate for more error correction
	-as you push bit rate to more you need more forward error correction because you will lose more
		-so the error correction makes up for the increase in lost
		-entropy stays the same, but you will send faster
			-same bandwidth but symbol rate increases


4. from quiz
	Public writings, in steganography, embed messages between allies; researchers report also seeing "secrets" in nonpublic gifts.
	Give 3 examples of steganography in every day life
	-printer watermarks
	-dollar bills have hidden watermark type things
	-use first letter of each word

5.  Consider a bit-mapped image and an indexed color image
	what steganography techniques will apply to both of them?

	Which ones will differ between them?

	different
		-cant use LSB encoding on indexed file but can on BMP
		-on index file you can duplicate colors or hide message in index table which

	Same
		-image shading

Bluetooth

FSK versions 1.1   1 Mbit for both
			 1.2

			 2.0 	Enhance data rate 
			 		D QPSK (diff Quad PSK)
			 			2 Mbits/s
			 2.1	also use 8 DPSK (3 Mbits/s)

			 		LE 	-low energy
			 			Guassian FSK (1Mb)
			 			-instead of instant change b.w. high and low frequency it is a slower transition (more of a curve)
2.1 has better security and auth


4 Modes
	mode 1 = no security -supported by 2.0 and earlier

	mode 2 = service level enforced
			 -after link is established
			 -discovery in clear
			 -2.0 (supported by 2.1 but not reccommended)
	mode 3 = link level
			 mandates auth and encryption
			 secure discovery
			 	-means negotiating all cryptography before security
			 		-gives higher risk of DoS
	mode 4 = 2.1 currently used
			 - back to service level
			 -uses SSP (secure simple pairing)
			 -Elliptic curve Diffie Hellman
			 -requires encryption for all but discovery

-both mode 2 and 3 use a PIN for pairing


Secure Simple Pairing
-4 modes of simple pairing
	mode 1: 2 displays
			-pair it and then it uses Diffie Hellman Key exchange
			-each person displays their exchanged Diffie Hellman secret and if match it says yes they match
			-you would hash your G^a and G^b and display them.  If the 2 displays don't show the same value then there was MiM attack
	mode 2: 1 display, 1 input
			- paskey
	mode 3: Just Works
			no comparison
			   headset
	mode 4: out of band (OOB)
			-assumes you have another communication channel (i.e. NFC)

blue snarfing
	-force a device to pair with you and then intercept class 
	-getting Mobile identifier
blue jacking
	-sending unsolicited messages to a bluetooth device
	-could perform some sort of phishing attack
blue bugging
	-uses commands of phone without letting person know
	-place phone calls, listen to calls, send messages
	-accessing
car whisperer
	-exploits key implementation in hands free car blue tooth
	-lets an attacker send and receive audio from car kit


-------------------------------------------------------


Advanced Network and System Security Lecture 14 Notes

Exam Review

Passwords and Math of passwords

b = bits in the password
e = s.t. 2^e entries in the password file
p = probability single password is in the dictionary
d = s.t. 2^d is size of dictionary in entries


Salt 	Dict 	Password 		Effort
Y/N 	N 		Admin 			2^(b - 1)
N 		N 		Any 			2^(b-e-1)
	-you do 2^(b-1) calculations and have 2^e to compare to
-sort list of hashes and do a binary search on them
	-50 % 50 chance it is above or below (so 1 bit of entropy)
	-if you split it 75 25 then you would have to do more calculations because you get less than 1 bit of entropy for each
Y 		N 		Any 			2^(b-1)
Y/N 	Y 		Admin 		 P*(2^(d-1)) + (1-p)2^(b-1)
N 		Y 		Any 		  1*(2^(d-1)) + 0*2^(d-1)
Y 		Y 		Any 		  2^d/p


1 3 1 2 1 1 2 3 1 2 3 1 1 2 3 1

What is the average = sum of all / #
What is the total = sum of all

LEts say this is a count of the # of widgets a worker makes in each hour?

Lets say 

P(A) = 1/2
P(B) = 1/4 		Total bits of entropy = 28
P(C) = 1/8
P(D) = 1/8

				Average Entropy per hour = 1.75

1/2*log(1/1/2) + 1/4*log(1/1/4) + 2*1/8*log(1/1/8)
=.5log(2) + .25log(4) + .25log(8)
=.5 + .5 + .75 = 1.75

log(1/1/2) = 1 bit per A (1s)
log(1/1/4) = 2 bits per B (2s)
log(1/1/8) = 3 bits per C and D (half of 3s each)


1 bit password how many tries to you have to try to gaurantee you have found it

2 tries
2 minutes if 1 minute/try

2 bit password you need 4 tries
4 minutes

3 bit password you need 8 tries
8 minutes

how large of a password can you brute force in 64 minutes

6 bit password requires 64 tries
64 minutes

if it takes 1 day to do 4 bits how many days does it take to do 5 bits?
2 days

if it takes a year to do 3 bits how many years does it takes to do 5 bits
4 years

1 bit in a day how many can you do in a week about?
4 bits in 8 days

if 2^32 passwords = 1 second

2^33 = 2 seconds
2^34 = 4 seconds

how long would 2^70 take = 4*2^36 second
 						 = 2^38 seconds
 						 = 8 million years

how much entropy would 10 lowercase random characters have?

	log(1/1/26) = 4.5 bits/char*10 characters = 45 bits

	9 characters and 1 number w/set position
							  = 9*4.5+log(1/1/10)
							  = 40.5 + 3.2 = 43.7 bits
	if number is at end or beginning = 44.7
	if it goes anywhere = 40.5 + 3.2 + log(1/1/10) = 46.9


if 64 items in bucket
-upper case, lower case, numbers, and some symbols

grab an item randomly out of bucket
entropy in the 1 item = log(1/1/64) = log(64) = 6bits
if you throw it back in and draw another one you get another 6 bits.
-each time you do this you get another 6 bits.

Huffman encoding
-identify which diagrams are valid or invalid

A 00
B 01
C 110
D 111
E 011
F 010
G 10
						Draw it working backwards
-You know it won't work because 01 could be B or F

A 10
B 11
C 01
D 000
E 0010 
F 0011

Can tell it will work because no ambiguity
-draw to double check


if split with 60 40 split how many would you have to order to get 250 bits of entropy
- know formula
- figure out how much bit of entropy each has and then do 250/that number
log(1/1/.6) + log(1/1/.4) = 


baud = wave changes per second
	
FHSS - Freq. hopping spread spectrum
	-wnat to transmit with broader spectrum (less noise)
	-every 500 microseconds switch frequency
	-pseudo random
	-put forward correction on it so that lossy is unnoticed
DSSS - direct sequence spread spectrum
	 - there is a frequency that each original bit gets XORed with - with error correction there is a less likelihood of losing a bit
	 - takes more bandwidth
	 - protected on physical layer


Q 4 - figure out how many 1s and 0s you can encode in each waveform change


LZW decompression

READ 65,66,67,128,130,129,131

ABCABCABCABC


Social Engineering

Reciprocation
-have someone watch your stuff and then steal theirs if they ask you to watch theirs next

Commitment and consistency
-get promises

Social Proof
-celebrities are doing things, so it seems cool
-laugh track

Authority
-seated above you

Scarcity
-limited time offer


Sender
0 x 		dr 			+ 	up 			1 		
1 + 		up 			+   up 			1 		1
0 + 		right 		x   upright 	1 		
0 x 		dr 			x   dr 			0 		0
1 + 		up 			+   up 			1 		1
0 x 		dr 			x   dr 			0 		0
1 + 		up 			x   dr 			0 
0 + 		right 		+   right 		0 		0
0 1
 x

  1
 0+


to make sure no one is listening sacrifice some of the bits you were going to keep
-if enough match then you can say probably nobody is listening
-the ones you didn't sacrifice that you used the same filter is the one time pad you will use



Test 2 = may 7th 6:30PM


_______________________________________________________


End of class




